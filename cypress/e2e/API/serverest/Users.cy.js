/// <reference types="cypress"/>
import { requestHeaderInfo } from '../../../support/helpers/utils';

const Leite = require('leite');

const leite = new Leite();
const path = "cypress/fixtures/serverest";

describe(`
    - Creating automated tests to exercise the verbs GET, POST, PUT, and DELETE for the service "users";
    - After the tests are finished all data generated by them will be deleted; `, () => {

    context('POST', () => {
        const email = leite.pessoa.email();
        it('Verify that is possible to create a new user', () => {
            cy.fixture('password.json').then(password => {
                const payload = {
                    nome: leite.pessoa.nome(),
                    email: email,
                    password: password.password,
                    administrador: "true"
                };

                cy.request(
                    requestHeaderInfo({
                        path: '/usuarios',
                        payload: payload
                    }).POST()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(201, 'check the status code');

                    expect(body).to.haveOwnProperty('message', "Cadastro realizado com sucesso", 'Check the message');
                    expect(body, 'check if the attribute exists').to.haveOwnProperty('_id');

                    payload._id = body._id;
                    cy.writeFile(`${path}/user.json`, payload);
                });
            })
        });

        it('Verify that is not possible to create a user with the same email', () => {
            const payload = {
                nome: leite.pessoa.nome(),
                email: email,
                password: leite.pessoa.cpf(),
                administrador: "true"
            };
            cy.request(
                requestHeaderInfo({
                    path: '/usuarios',
                    payload: payload
                }).POST()
            ).then(response => {
                const { status, body } = response;
                expect(status).to.be.equal(400, 'check the status code');

                expect(body).to.haveOwnProperty('message', "Este email já está sendo usado", 'Check the message');
            });
        });

        it('Verify that the administrador, email, nome, and password are mandatory', () => {
            cy.request(
                requestHeaderInfo({
                    path: '/usuarios'
                }).POST()
            ).then(response => {
                const { status, body } = response;
                expect(status).to.be.equal(400, 'check the status code');

                expect(body).to.haveOwnProperty('email', 'email é obrigatório', 'Check the email attribute');
                expect(body).to.haveOwnProperty('password', 'password é obrigatório', 'Check the password attribute');
                expect(body).to.haveOwnProperty('nome', 'nome é obrigatório', 'Check the nome attribute');
                expect(body).to.haveOwnProperty('administrador', 'administrador é obrigatório', 'Check the administrador attribute');
            });
        });
    });

    context('GET', () => {
        it(`Verify that is possible to get the user information by query params`, () => {
            cy.fixture('serverest/user.json').then(user => {
                for (const [key, value] of Object.entries(user)) {
                    cy.request(
                        requestHeaderInfo({
                            path: `/usuarios?${key}=${value}`
                        }).GET()
                    ).then(response => {
                        const { status, body: { quantidade, usuarios } } = response;
                        expect(status).to.be.equal(200, 'check the status code');
                        expect(quantidade).to.gte(1, 'Check the quantidade attribute');

                        if (quantidade === 1) {
                            for (const { administrador, email, nome, password, _id } of usuarios) {
                                expect(administrador).to.be.equals(user.administrador, 'Check the administrador attribute');
                                expect(email).to.be.equals(user.email, 'Check the email attribute');
                                expect(nome).to.be.equals(user.nome, 'Check the nome attribute');
                                expect(password).to.be.equals(user.password, 'Check the password attribute');
                                expect(_id).to.be.equals(user._id, 'Check the _id attribute');
                            }
                        } else {
                            for (const usuario of usuarios) {
                                expect(usuario, 'Check the administrador attribute').to.haveOwnProperty('administrador');
                                expect(usuario, 'Check the email attribute').to.haveOwnProperty('email');
                                expect(usuario, 'Check the nome attribute').to.haveOwnProperty('nome');
                                expect(usuario, 'Check the password attribute').to.haveOwnProperty('password');
                                expect(usuario, 'Check the _id attribute').to.haveOwnProperty('_id');
                            }
                            cy.writeFile(`${path}/users.json`, usuarios);
                        }
                    });
                }
            });
        });

        it(`Verify that is possible to get the user information by path params`, () => {
            cy.fixture('serverest/user.json').then(user => {
                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios/${user._id}`
                    }).GET()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(200, 'check the status code');

                    expect(body.administrador).to.be.equals(user.administrador, 'Check the administrador attribute');
                    expect(body.email).to.be.equals(user.email, 'Check the email attribute');
                    expect(body.nome).to.be.equals(user.nome, 'Check the nome attribute');
                    expect(body.password).to.be.equals(user.password, 'Check the password attribute');
                    expect(body._id).to.be.equals(user._id, 'Check the _id attribute');

                });
            })
        });

        it(`Verify that is not possible to get the user information by wrong path params values`, () => {
            cy.request(
                requestHeaderInfo({
                    path: `/usuarios/${leite.pessoa.cpf()}`
                }).GET()
            ).then(response => {
                const { status, body } = response;
                expect(status).to.be.equal(400, 'check the status code');

                expect(body).to.haveOwnProperty('message', "Usuário não encontrado", 'Check the message');

            });
        });

        it(`Verify that is not possible to get the user information by wrong query params values`, () => {
            const object = {
                nome: leite.pessoa.nome(),
                email: leite.pessoa.email(),
                password: leite.pessoa.cpf(),
                _id: leite.pessoa.cpf()
            };
            for (const [key, value] of Object.entries(object)) {
                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios?${key}=${value}`
                    }).GET()
                ).then(response => {
                    const { status, body: { quantidade, usuarios } } = response;
                    expect(status).to.be.equal(200, 'check the status code');
                    expect(quantidade).to.equal(0, 'Check the quantidade attribute');
                    expect(usuarios, 'Check the usuarios attribute').to.be.empty;
                });
            }
        });
    });

    context('PUT', () => {
        it('Verify that the administrador, email, nome, and password are mandatory', () => {
            cy.fixture('serverest/user.json').then(user => {
                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios/${user._id}`
                    }).PUT()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(400, 'check the status code');

                    expect(body).to.haveOwnProperty('email', 'email é obrigatório', 'Check the email attribute');
                    expect(body).to.haveOwnProperty('password', 'password é obrigatório', 'Check the password attribute');
                    expect(body).to.haveOwnProperty('nome', 'nome é obrigatório', 'Check the nome attribute');
                    expect(body).to.haveOwnProperty('administrador', 'administrador é obrigatório', 'Check the administrador attribute');
                });
            });
        });

        it(`Verify that is possible to update an user with the same email`, () => {
            cy.fixture('serverest/user.json').then(user => {
                cy.fixture('serverest/users.json').then(users => {
                    user.email = users.find(user => user.nome === 'Fulano da Silva').email;
                    const id = user._id;
                    delete user._id;

                    cy.request(
                        requestHeaderInfo({
                            path: `/usuarios/${id}`,
                            payload: user
                        }).PUT()
                    ).then(response => {
                        const { status, body } = response;
                        expect(status).to.be.equal(400, 'check the status code');
                        expect(body).to.haveOwnProperty('message', "Este email já está sendo usado", 'Check the message');
                    });
                });
            });
        });

        it(`Verify that is possible to update an user`, () => {
            cy.fixture('serverest/user.json').then(user => {
                user.nome = leite.pessoa.nome();
                user.email = leite.pessoa.email();
                const id = user._id;
                delete user._id;

                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios/${id}`,
                        payload: user
                    }).PUT()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(200, 'check the status code');
                    expect(body).to.haveOwnProperty('message', "Registro alterado com sucesso", 'Check the message');

                    cy.fixture('serverest/user.json').then(user => {
                        cy.request(
                            requestHeaderInfo({
                                path: `/usuarios/${user._id}`
                            }).GET()
                        ).then(response => {
                            const { status, body } = response;
                            expect(status).to.be.equal(200, 'check the status code');

                            expect(body.administrador).to.be.equals(user.administrador, 'Check the administrador attribute');
                            expect(body.email).to.be.not.equals(user.email, 'Check the email attribute');
                            expect(body.nome).to.be.not.equals(user.nome, 'Check the nome attribute');
                            expect(body.password).to.be.equals(user.password, 'Check the password attribute');
                            expect(body._id).to.be.equals(user._id, 'Check the _id attribute');

                        });
                    });
                });
            });
        });

        it('Verify that is possible to create a new user using the PUT', () => {
            cy.fixture('password.json').then(password => {
                const payload = {
                    nome: leite.pessoa.nome(),
                    email: leite.pessoa.email(),
                    password: password.password,
                    administrador: "true"
                };

                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios/${leite.pessoa.cpf()}`,
                        payload: payload
                    }).PUT()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(201, 'check the status code');

                    expect(body).to.haveOwnProperty('message', "Cadastro realizado com sucesso", 'Check the message');
                    expect(body, 'check if the attribute exists').to.haveOwnProperty('_id');
                });
            })
        });
    });

    context('DELETE', () => {
        it('Verify that is not possible to delete a user that has a cart', () => {
            cy.request(
                requestHeaderInfo({
                    path: `/carrinhos`
                }).GET()
            ).then(response => {
                const { idUsuario } = response.body.carrinhos[0];
                cy.request(
                    requestHeaderInfo({
                        path: `/usuarios/${idUsuario}`
                    }).DELETE()
                ).then(response => {
                    const { status, body } = response;
                    expect(status).to.be.equal(400, 'check the status code');

                    expect(body).to.haveOwnProperty('message', "Não é permitido excluir usuário com carrinho cadastrado", 'Check the message');
                });
            });
        });

        it('Verify that appears the "Nenhum registro excluído" message after inform a wrong id', () => {
            cy.request(
                requestHeaderInfo({
                    path: `/usuarios/${leite.pessoa.cpf()}`
                }).DELETE()
            ).then(response => {
                const { status, body } = response;
                expect(status).to.be.equal(200, 'check the status code');

                expect(body).to.haveOwnProperty('message', "Nenhum registro excluído", 'Check the message');
            });
        });
    });

    after('Deleting all test data that was used by the tests', () => {
        cy.fixture('serverest/user.json').then(user => {
            cy.request(
                requestHeaderInfo({
                    path: `/usuarios/${user._id}`
                }).DELETE()
            );
        });
    });
});
